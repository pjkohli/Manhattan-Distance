#include <iostream>
#include <cstdio>
#define RANGE 20
#define MAX_NO_OF_EVENTS 50
#define MAX_NO_OF_TICKETS 50
#define MAX_PRICE 100
using namespace std;

int main() {
    int x_coordinate[MAX_NO_OF_EVENTS],y_coordinate[MAX_NO_OF_EVENTS],number_of_tickets[MAX_NO_OF_EVENTS], id,i; 
    int input_x, input_y, count =0, array_of_ids[15], distance[15];
    float price[MAX_NO_OF_EVENTS][MAX_NO_OF_TICKETS],cheapest_price[MAX_NO_OF_EVENTS];
    //For each Event generate seed data, where id is unique for each event
    for (id = 0; id<MAX_NO_OF_EVENTS; id++){
        //Range -10 to 10
        x_coordinate[id] = (rand() % (RANGE+1))-10;
        y_coordinate[id] = (rand() % (RANGE+1))-10;
        //Each event has 0 or more tickets
        number_of_tickets[id] = rand() % (MAX_NO_OF_TICKETS+1);
        cheapest_price[id] = MAX_PRICE;
        //for each ticket generate prices
        for(i=0;i<number_of_tickets[id];i++){
            //Each ticket has a non zero price
            price[id][i] = (float)((rand() % (MAX_PRICE*100))+1.00)/100.00;
            if (price[id][i] < cheapest_price[id]){
                //Each cheapest priced ticket for every event is stored in array cheapest_price[]
                cheapest_price[id] = price[id][i];
            }
        }  
        //One coordinate can hold only event. If repeated co-ordinates are generated, delete and regenerate values
        for(i = 0 ; i<id ; i++){
            if ((x_coordinate[id] == x_coordinate[i])&&(y_coordinate[id] == y_coordinate[i])){
                id--;
                break;
            } 
        }
    }
    //Input from user
    cout << "Please Input coordinates:" << "\n";
    cin >> input_x >> input_y;
    //Find closest events using manhattan distance
    //If event at user entered co-ordinates exist, then distance is 0
    for (id = 0; id<MAX_NO_OF_EVENTS; id++){
        if ((x_coordinate[id] == (input_x))&&(y_coordinate[id] == input_y)){
                array_of_ids[count] = id;
                distance[count] = 0;
                count++;
                break;
            }
    }
    int j = 1;
    //Find all nearest events starting from d =1.
    while (j<=20 && count < 5){
        for (id = 0; id<MAX_NO_OF_EVENTS; id++){
            //Four Straight co-ordinates
            if ((input_x+j<=10)&&(x_coordinate[id] == (input_x+j))&&(y_coordinate[id] == input_y)){
                array_of_ids[count] = id;
                distance[count] = j;
                count++;
            }
            else if (((input_x-j)>=-10)&&(x_coordinate[id] == (input_x-j))&&(y_coordinate[id] == input_y)){
                array_of_ids[count] = id;
                distance[count] = j;
                count++;
            }
            else if ((x_coordinate[id] == input_x)&&(y_coordinate[id] == (input_y+j))&&(input_y+j<=10)){
                array_of_ids[count] = id;
                distance[count] = j;
                count++;
            }
            else if (((input_y-j)>=-10)&&(x_coordinate[id] == input_x)&&(y_coordinate[id] == (input_y-j))){
                array_of_ids[count] = id;
                distance[count] = j;
                count++;
            } 
            //Four Diagonal co-ordinates
            else if ((j!=1)&&((input_x-j+1)>=-10)&&(input_y+j-1<=10)&&(x_coordinate[id] == (input_x-j+1))&&(y_coordinate[id] == input_y+j-1)){
                array_of_ids[count] = id;
                distance[count] = j;
                count++;
            }
            else if ((j!=1)&&((input_x-j+1)>=-10)&&((input_y-j+1)>=-10)&&(x_coordinate[id] == (input_x-j+1))&&(y_coordinate[id] == input_y-j+1)){
                array_of_ids[count] = id;
                distance[count] = j;
                count++;
            }
            else if ((j!=1)&&((input_x+j-1)<=10)&&((input_y-j+1)>=-10)&&(x_coordinate[id] == (input_x+j-1))&&(y_coordinate[id] == input_y-j+1)){
                array_of_ids[count] = id;
                distance[count] = j;
                count++;
            }
            else if((j!=1)&&((input_x+j-1)<=10)&&((input_y+j-1)<=10)&&(x_coordinate[id] == (input_x+j-1))&&(y_coordinate[id] == input_y+j-1)){
                array_of_ids[count] = id;
                distance[count] = j;
                count++;
           }
        }
        j++;
    }
    // Find lowest price events from largest distanced events. If counter is more than 5, i.e. more than one event are at same distance. Find lowest priced events among those equi-distanced events.
    if(count > 5){
        int diff = count-5;
        //Get last distance and delete expensive events with distance = last_distance.
        int last_distance=distance[count-1];
        float large_price;
        j=0;
        int loc,temp;
        //Delete diff number of higher priced events from array
        while(j<diff){
            large_price =0;
            for(i=0; i<count; i++){
                if((distance[i] == last_distance) && (cheapest_price[array_of_ids[i]] > large_price)){
                    large_price = cheapest_price[array_of_ids[i]];
                    loc = i;
                }
            }  
            array_of_ids[loc] = array_of_ids[count-1];
            count--;
            j++;
        }       
    }
    cout << "Closest Events to ("<< input_x <<","<< input_y <<"):"<<"\n";
    for(i = 0; i<count;i++){
        cout <<"Event "<<array_of_ids[i]<<" - $"<<cheapest_price[array_of_ids[i]]<<", Distance "<<distance[i]<<"\n";
    }
    
    return 0;
}
